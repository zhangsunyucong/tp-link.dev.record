sudo apt-get install openjdk-7-jdk  
编辑gedit ~/.bashrc文件，末尾加：

JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/  
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin  
export JAVA_HOME  
export PATH  

sudo apt-get install git-core gnupg flex bison gperf build-essential \
  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \
  libgl1-mesa-dev libxml2-utils xsltproc unzip

和

C/C++编译环境
sudo apt-get install vim automake make perl gcc g++ 
sudo apt-get install vim automake make perl gcc g++ 
如果是Docker镜像，还需要安装如下的工具：
sudo apt-get install software-properties-common python-software-properties bc lib32z1 、
（不行再参考http://blog.csdn.net/skykingf/article/details/45370223）

编辑gedit ~/.bashrc文件，末尾加：export USE_CCACHE=1,设置高速缓存

1）设置cache
cd aosp 
prebuilts/misc/linux-x86/ccache/ccache -M 50G

2）初始化编译环境
. build/envsetup.sh

3）选择编译目标包
ps：lunch的方式有很多中，可以使用lunch命令查看，我使用最常用的
lunch aosp_arm-eng

4）编译
make 
ps: 1.make后面可以更参数：如你的机器时双核，每核双线程的话，使用make -j4,这样速度更快，但编译时使用的内存也更多
2.make失败或停止后，可以使用make -k 继续编译


（全部不通，参考http://www.cnblogs.com/bluestorm/p/4419135.html）
